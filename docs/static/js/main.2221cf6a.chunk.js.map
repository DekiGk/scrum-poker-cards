{"version":3,"sources":["components/ColorPicker.tsx","components/Card.tsx","components/BigCard.tsx","App.tsx","serviceWorker.ts","index.tsx"],"names":["Colors","ColorPicker","props","color","isActive","onClick","className","data-color","Card","number","isBig","data-number","BigCard","children","isShown","App","useState","Green","selectedColor","setSelectedColor","currentCard","setCurrentCard","handleColorPickerClick","event","currentTarget","dataset","handleCardClick","src","alt","Red","Blue","Orange","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.2221cf6a.chunk.js","sourcesContent":["import React from 'react'\r\n\r\nexport enum Colors {\r\n  Red = 'red',\r\n  Green = 'green',\r\n  Blue = 'blue',\r\n  Orange = 'orange',\r\n}\r\n\r\ninterface IColorPicker {\r\n  color: string\r\n  isActive: boolean\r\n  onClick: (event: React.MouseEvent<HTMLButtonElement, MouseEvent>) => void\r\n}\r\n\r\nexport const ColorPicker: React.FC<IColorPicker> = props => {\r\n  const { color, isActive, onClick } = props\r\n\r\n  return (\r\n    <button\r\n      className={`color-picker color-${color} ${isActive ? 'active' : ''}`}\r\n      onClick={onClick}\r\n      data-color={color}\r\n    >\r\n      #\r\n    </button>\r\n  )\r\n}\r\n","import React from 'react'\r\n\r\ninterface ICard {\r\n  color: string\r\n  number: string\r\n  isBig?: boolean\r\n  onClick?: (event: React.MouseEvent<HTMLButtonElement, MouseEvent>) => void\r\n}\r\n\r\nexport const Card: React.FC<ICard> = props => {\r\n  const { color, number, onClick, isBig } = props\r\n\r\n  return (\r\n    <button\r\n      className={`card color-${color} ${isBig && 'card-big'}`}\r\n      onClick={onClick}\r\n      data-number={number}\r\n    >\r\n      {number}\r\n    </button>\r\n  )\r\n}\r\n","import React from 'react'\r\n\r\ninterface IBigCard {\r\n  isShown: boolean\r\n}\r\n\r\nexport const BigCard: React.FC<IBigCard> = props => {\r\n  const { children, isShown } = props\r\n\r\n  return (\r\n    <div className={`full-overlay ${isShown ? 'show-overlay' : ''}`}>\r\n      {children}\r\n    </div>\r\n  )\r\n}\r\n","import React, { useState } from 'react'\nimport './App.css'\nimport { ColorPicker, Colors } from './components/ColorPicker'\nimport { Card } from './components/Card'\nimport { BigCard } from './components/BigCard'\n\nconst App: React.FC = () => {\n  const [selectedColor, setSelectedColor] = useState(Colors.Green as string)\n  const [currentCard, setCurrentCard] = useState()\n\n  const handleColorPickerClick = (\n    event: React.MouseEvent<HTMLButtonElement, MouseEvent>\n  ) => {\n    setSelectedColor(event.currentTarget.dataset.color || Colors.Green)\n  }\n\n  const handleCardClick = (\n    event: React.MouseEvent<HTMLButtonElement, MouseEvent>\n  ) => {\n    setCurrentCard(event.currentTarget.dataset.number)\n  }\n\n  const handleBigCardClick = (\n    event: React.MouseEvent<HTMLButtonElement, MouseEvent>\n  ) => {\n    setCurrentCard(null)\n  }\n\n  return (\n    <div className=\"App\">\n      <BigCard isShown={!!currentCard}>\n        <Card\n          color={selectedColor}\n          number={currentCard}\n          onClick={handleBigCardClick}\n          isBig={true}\n        />\n      </BigCard>\n\n      <div className=\"qr-code\">\n        <img src=\"img/qr.svg\" alt=\"\" />\n      </div>\n\n      <div className=\"colors\">\n        <ColorPicker\n          color={Colors.Green}\n          isActive={selectedColor === Colors.Green}\n          onClick={handleColorPickerClick}\n        />\n        <ColorPicker\n          color={Colors.Red}\n          isActive={selectedColor === Colors.Red}\n          onClick={handleColorPickerClick}\n        />\n        <ColorPicker\n          color={Colors.Blue}\n          isActive={selectedColor === Colors.Blue}\n          onClick={handleColorPickerClick}\n        />\n        <ColorPicker\n          color={Colors.Orange}\n          isActive={selectedColor === Colors.Orange}\n          onClick={handleColorPickerClick}\n        />\n      </div>\n\n      <div className=\"cards\">\n        <Card color={selectedColor} number={'0'} onClick={handleCardClick} />\n        <Card color={selectedColor} number={'0.5'} onClick={handleCardClick} />\n        <Card color={selectedColor} number={'1'} onClick={handleCardClick} />\n        <Card color={selectedColor} number={'2'} onClick={handleCardClick} />\n        <Card color={selectedColor} number={'3'} onClick={handleCardClick} />\n        <Card color={selectedColor} number={'5'} onClick={handleCardClick} />\n        <Card color={selectedColor} number={'8'} onClick={handleCardClick} />\n        <Card color={selectedColor} number={'13'} onClick={handleCardClick} />\n        <Card color={selectedColor} number={'20'} onClick={handleCardClick} />\n        <Card color={selectedColor} number={'40'} onClick={handleCardClick} />\n        <Card color={selectedColor} number={'100'} onClick={handleCardClick} />\n        <Card color={selectedColor} number={'?'} onClick={handleCardClick} />\n        <Card color={selectedColor} number={'∞'} onClick={handleCardClick} />\n        <Card color={selectedColor} number={'☕'} onClick={handleCardClick} />\n      </div>\n    </div>\n  )\n}\n\nexport default App\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      process.env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}